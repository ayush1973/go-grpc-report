// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: report.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
)

type ReportServiceClient interface {
	GenerateReport(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) GenerateReport(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/proto.ReportService/GenerateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/proto.ReportService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ReportServiceServer interface {
	GenerateReport(context.Context, *UserRequest) (*ReportResponse, error)
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
}

type UnimplementedReportServiceServer struct{}

func (*UnimplementedReportServiceServer) GenerateReport(ctx context.Context, req *UserRequest) (*ReportResponse, error) {
	return nil, nil
}

func (*UnimplementedReportServiceServer) HealthCheck(ctx context.Context, req *HealthRequest) (*HealthResponse, error) {
	return nil, nil
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateReport",
			Handler:    _ReportService_GenerateReport_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ReportService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}

func _ReportService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportService/GenerateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GenerateReport(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}
